//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Tilemaps_TileBaseWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Tilemaps.TileBase), typeof(UnityEngine.ScriptableObject));
		L.RegFunction("RefreshTile", RefreshTile);
		L.RegFunction("GetTileData", GetTileData);
		L.RegFunction("GetTileAnimationData", GetTileAnimationData);
		L.RegFunction("StartUp", StartUp);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.TileBase obj = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 1);
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.ITilemap arg1 = (UnityEngine.Tilemaps.ITilemap)ToLua.CheckObject<UnityEngine.Tilemaps.ITilemap>(L, 3);
			obj.RefreshTile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Tilemaps.TileBase obj = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 1);
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.ITilemap arg1 = (UnityEngine.Tilemaps.ITilemap)ToLua.CheckObject<UnityEngine.Tilemaps.ITilemap>(L, 3);
			UnityEngine.Tilemaps.TileData arg2 = StackTraits<UnityEngine.Tilemaps.TileData>.Check(L, 4);
			obj.GetTileData(arg0, arg1, ref arg2);
			ToLua.PushValue(L, arg2);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileAnimationData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Tilemaps.TileBase obj = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 1);
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.ITilemap arg1 = (UnityEngine.Tilemaps.ITilemap)ToLua.CheckObject<UnityEngine.Tilemaps.ITilemap>(L, 3);
			UnityEngine.Tilemaps.TileAnimationData arg2 = StackTraits<UnityEngine.Tilemaps.TileAnimationData>.Check(L, 4);
			bool o = obj.GetTileAnimationData(arg0, arg1, ref arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.PushValue(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Tilemaps.TileBase obj = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 1);
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.ITilemap arg1 = (UnityEngine.Tilemaps.ITilemap)ToLua.CheckObject<UnityEngine.Tilemaps.ITilemap>(L, 3);
			UnityEngine.GameObject arg2 = (UnityEngine.GameObject)ToLua.CheckObject(L, 4, typeof(UnityEngine.GameObject));
			bool o = obj.StartUp(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

