//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_Tilemaps_TilemapWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Tilemaps.Tilemap), typeof(UnityEngine.GridLayout));
		L.RegFunction("GetCellCenterLocal", GetCellCenterLocal);
		L.RegFunction("GetCellCenterWorld", GetCellCenterWorld);
		L.RegFunction("GetTile", GetTile);
		L.RegFunction("GetTilesBlock", GetTilesBlock);
		L.RegFunction("SetTile", SetTile);
		L.RegFunction("SetTiles", SetTiles);
		L.RegFunction("SetTilesBlock", SetTilesBlock);
		L.RegFunction("HasTile", HasTile);
		L.RegFunction("RefreshTile", RefreshTile);
		L.RegFunction("RefreshAllTiles", RefreshAllTiles);
		L.RegFunction("SwapTile", SwapTile);
		L.RegFunction("ContainsTile", ContainsTile);
		L.RegFunction("GetUsedTilesCount", GetUsedTilesCount);
		L.RegFunction("GetUsedTilesNonAlloc", GetUsedTilesNonAlloc);
		L.RegFunction("GetSprite", GetSprite);
		L.RegFunction("GetTransformMatrix", GetTransformMatrix);
		L.RegFunction("SetTransformMatrix", SetTransformMatrix);
		L.RegFunction("GetColor", GetColor);
		L.RegFunction("SetColor", SetColor);
		L.RegFunction("GetTileFlags", GetTileFlags);
		L.RegFunction("SetTileFlags", SetTileFlags);
		L.RegFunction("AddTileFlags", AddTileFlags);
		L.RegFunction("RemoveTileFlags", RemoveTileFlags);
		L.RegFunction("GetInstantiatedObject", GetInstantiatedObject);
		L.RegFunction("SetColliderType", SetColliderType);
		L.RegFunction("GetColliderType", GetColliderType);
		L.RegFunction("FloodFill", FloodFill);
		L.RegFunction("BoxFill", BoxFill);
		L.RegFunction("ClearAllTiles", ClearAllTiles);
		L.RegFunction("ResizeBounds", ResizeBounds);
		L.RegFunction("CompressBounds", CompressBounds);
		L.RegFunction("GetEditorPreviewTile", GetEditorPreviewTile);
		L.RegFunction("SetEditorPreviewTile", SetEditorPreviewTile);
		L.RegFunction("HasEditorPreviewTile", HasEditorPreviewTile);
		L.RegFunction("GetEditorPreviewSprite", GetEditorPreviewSprite);
		L.RegFunction("GetEditorPreviewTransformMatrix", GetEditorPreviewTransformMatrix);
		L.RegFunction("SetEditorPreviewTransformMatrix", SetEditorPreviewTransformMatrix);
		L.RegFunction("GetEditorPreviewColor", GetEditorPreviewColor);
		L.RegFunction("SetEditorPreviewColor", SetEditorPreviewColor);
		L.RegFunction("GetEditorPreviewTileFlags", GetEditorPreviewTileFlags);
		L.RegFunction("EditorPreviewFloodFill", EditorPreviewFloodFill);
		L.RegFunction("EditorPreviewBoxFill", EditorPreviewBoxFill);
		L.RegFunction("ClearAllEditorPreviewTiles", ClearAllEditorPreviewTiles);
		L.RegFunction("New", _CreateUnityEngine_Tilemaps_Tilemap);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("layoutGrid", get_layoutGrid, null);
		L.RegVar("cellBounds", get_cellBounds, null);
		L.RegVar("localBounds", get_localBounds, null);
		L.RegVar("animationFrameRate", get_animationFrameRate, set_animationFrameRate);
		L.RegVar("color", get_color, set_color);
		L.RegVar("origin", get_origin, set_origin);
		L.RegVar("size", get_size, set_size);
		L.RegVar("tileAnchor", get_tileAnchor, set_tileAnchor);
		L.RegVar("orientation", get_orientation, set_orientation);
		L.RegVar("orientationMatrix", get_orientationMatrix, set_orientationMatrix);
		L.RegVar("editorPreviewOrigin", get_editorPreviewOrigin, null);
		L.RegVar("editorPreviewSize", get_editorPreviewSize, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Tilemaps_Tilemap(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				UnityEngine.Tilemaps.Tilemap obj = new UnityEngine.Tilemaps.Tilemap();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Tilemaps.Tilemap.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCellCenterLocal(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Vector3 o = obj.GetCellCenterLocal(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCellCenterWorld(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Vector3 o = obj.GetCellCenterWorld(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase o = obj.GetTile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTilesBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.BoundsInt arg0 = StackTraits<UnityEngine.BoundsInt>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase[] o = obj.GetTilesBlock(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.SetTile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int[] arg0 = ToLua.CheckStructArray<UnityEngine.Vector3Int>(L, 2);
			UnityEngine.Tilemaps.TileBase[] arg1 = ToLua.CheckObjectArray<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.SetTiles(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTilesBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.BoundsInt arg0 = StackTraits<UnityEngine.BoundsInt>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase[] arg1 = ToLua.CheckObjectArray<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.SetTilesBlock(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			bool o = obj.HasTile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			obj.RefreshTile(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RefreshAllTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			obj.RefreshAllTiles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SwapTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Tilemaps.TileBase arg0 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.SwapTile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ContainsTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Tilemaps.TileBase arg0 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 2);
			bool o = obj.ContainsTile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUsedTilesCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			int o = obj.GetUsedTilesCount();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetUsedTilesNonAlloc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Tilemaps.TileBase[] arg0 = ToLua.CheckObjectArray<UnityEngine.Tilemaps.TileBase>(L, 2);
			int o = obj.GetUsedTilesNonAlloc(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Sprite o = obj.GetSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTransformMatrix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Matrix4x4 o = obj.GetTransformMatrix(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTransformMatrix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Matrix4x4 arg1 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 3);
			obj.SetTransformMatrix(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Color o = obj.GetColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			obj.SetColor(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTileFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileFlags o = obj.GetTileFlags(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTileFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileFlags arg1 = (UnityEngine.Tilemaps.TileFlags)ToLua.CheckObject(L, 3, typeof(UnityEngine.Tilemaps.TileFlags));
			obj.SetTileFlags(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTileFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileFlags arg1 = (UnityEngine.Tilemaps.TileFlags)ToLua.CheckObject(L, 3, typeof(UnityEngine.Tilemaps.TileFlags));
			obj.AddTileFlags(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RemoveTileFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileFlags arg1 = (UnityEngine.Tilemaps.TileFlags)ToLua.CheckObject(L, 3, typeof(UnityEngine.Tilemaps.TileFlags));
			obj.RemoveTileFlags(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInstantiatedObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.GameObject o = obj.GetInstantiatedObject(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColliderType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.Tile.ColliderType arg1 = (UnityEngine.Tilemaps.Tile.ColliderType)ToLua.CheckObject(L, 3, typeof(UnityEngine.Tilemaps.Tile.ColliderType));
			obj.SetColliderType(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColliderType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.Tile.ColliderType o = obj.GetColliderType(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FloodFill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.FloodFill(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxFill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.BoxFill(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			obj.ClearAllTiles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResizeBounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			obj.ResizeBounds();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompressBounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			obj.CompressBounds();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorPreviewTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase o = obj.GetEditorPreviewTile(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEditorPreviewTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.SetEditorPreviewTile(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasEditorPreviewTile(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			bool o = obj.HasEditorPreviewTile(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorPreviewSprite(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Sprite o = obj.GetEditorPreviewSprite(arg0);
			ToLua.PushSealed(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorPreviewTransformMatrix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Matrix4x4 o = obj.GetEditorPreviewTransformMatrix(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEditorPreviewTransformMatrix(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Matrix4x4 arg1 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 3);
			obj.SetEditorPreviewTransformMatrix(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorPreviewColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Color o = obj.GetEditorPreviewColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetEditorPreviewColor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			obj.SetEditorPreviewColor(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetEditorPreviewTileFlags(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileFlags o = obj.GetEditorPreviewTileFlags(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorPreviewFloodFill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Tilemaps.TileBase arg1 = (UnityEngine.Tilemaps.TileBase)ToLua.CheckObject<UnityEngine.Tilemaps.TileBase>(L, 3);
			obj.EditorPreviewFloodFill(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EditorPreviewBoxFill(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 7);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.CheckObject<UnityEngine.Object>(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			int arg3 = (int)LuaDLL.luaL_checknumber(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int arg5 = (int)LuaDLL.luaL_checknumber(L, 7);
			obj.EditorPreviewBoxFill(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAllEditorPreviewTiles(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)ToLua.CheckObject(L, 1, typeof(UnityEngine.Tilemaps.Tilemap));
			obj.ClearAllEditorPreviewTiles();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layoutGrid(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Grid ret = obj.layoutGrid;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layoutGrid on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cellBounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.BoundsInt ret = obj.cellBounds;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cellBounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_localBounds(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Bounds ret = obj.localBounds;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index localBounds on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_animationFrameRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			float ret = obj.animationFrameRate;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index animationFrameRate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_origin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int ret = obj.origin;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index origin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int ret = obj.size;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_tileAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3 ret = obj.tileAnchor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tileAnchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_orientation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Tilemaps.Tilemap.Orientation ret = obj.orientation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index orientation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_orientationMatrix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Matrix4x4 ret = obj.orientationMatrix;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index orientationMatrix on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorPreviewOrigin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int ret = obj.editorPreviewOrigin;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index editorPreviewOrigin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_editorPreviewSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int ret = obj.editorPreviewSize;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index editorPreviewSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_animationFrameRate(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.animationFrameRate = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index animationFrameRate on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_origin(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			obj.origin = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index origin on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_size(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3Int arg0 = StackTraits<UnityEngine.Vector3Int>.Check(L, 2);
			obj.size = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index size on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_tileAnchor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.tileAnchor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index tileAnchor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_orientation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Tilemaps.Tilemap.Orientation arg0 = (UnityEngine.Tilemaps.Tilemap.Orientation)ToLua.CheckObject(L, 2, typeof(UnityEngine.Tilemaps.Tilemap.Orientation));
			obj.orientation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index orientation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_orientationMatrix(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Tilemaps.Tilemap obj = (UnityEngine.Tilemaps.Tilemap)o;
			UnityEngine.Matrix4x4 arg0 = StackTraits<UnityEngine.Matrix4x4>.Check(L, 2);
			obj.orientationMatrix = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index orientationMatrix on a nil value");
		}
	}
}

